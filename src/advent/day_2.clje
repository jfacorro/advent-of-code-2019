(ns advent.day-2
  (:require [advent.utils :as u]
            [clojure.string :as str]))

(defn add
  [pc program]
  (let [[_ x y z] (subvec program pc (+ pc 4))]
    (assoc program z (+ (program x)
                        (program y)))))

(defn multiply
  [pc program]
  (let [[_ x y z] (subvec program pc (+ pc 4))]
    (assoc program z (* (program x)
                        (program y)))))

(def opcode->fn
  {1  add
   2  multiply
   99 :halt})

(defn compute
  [pc program]
  (let [op (program pc)
        f  (opcode->fn op)]
    (cond
      (= f :halt)
      program

      f
      (compute (+ pc 4) (f pc program))

      :else
      (throw [:invalid_op op]))))


(defn program-corrections
  [program]
  (-> program
      (assoc 1 12)
      (assoc 2 2)))

(defn part-one []
  (->> (-> (u/input-for-day 2)
           first
           (str/split ","))
       (mapv erlang/binary_to_integer.1)
       (program-corrections)
       (compute 0)))
