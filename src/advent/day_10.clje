(ns advent.day-10
  (:require [advent.utils :as u]
            [clojure.string :as str]))

(defn step
  [delta]
  (if (pos? delta) 1 -1))

(defn int-coords?
  [[x y]]
  (and (== (int x) x)
       (== (int y) y)))

(defn coords->int
  [[x y]]
  [(int x) (int y)])

(defn line-of-sight
  "Return the positions that are in the line of
  sight, not including the origin and the
  destination"
  [[x y] [w z]]
  (let [dx (- w x)
        dy (- z y)
        step-x (step dx)
        step-y (step dy)
        pos    (cond
                 (zero? dx) (for [y' (range y z step-y)]
                              [x y'])
                 (zero? dy) (for [x' (range x w step-x)]
                              [x' y])
                 (< dy dx)  (for [y' (range y z step-y)]
                              [(+ x (/ (* dx (- y' y)) dy)) y'])
                 (<= dx dy) (for [x' (range x w step-x)]
                              [x' (+ y (/ (* dy (- x' x)) dx))]))
        ;; Remove the origin
        pos (-> pos rest vec)]
    (->> pos
         (filter int-coords?)
         (mapv coords->int))))

(defn get-pos
  [map-chart [x y]]
  (get-in map-chart [y x]))

(defn set-pos
  [map-chart [x y] v]
  (assoc-in map-chart [y x] v))

(defn visible?
  [map-chart orig dest]
  (->> (line-of-sight orig dest)
       (map #(get-pos map-chart %))
       (not-any? #(= "#" %))))

(defn input->map-chart
  [input]
  (mapv #(vec (seq %)) input))

(defn dimensions
  "Returns the dimensions (width and height) of the map"
  [map-chart]
  [(-> map-chart first count) (count map-chart)])

(defn all-positions
  "Calculates and returns a list of all positions
  for a map of the provided width and height"
  [w h]
  (for [x (range w) y (range h)] [x y]))

(defn calculate-visibility
  [map-chart]
  (let [[w h] (dimensions map-chart)
         all-pos (all-positions w h)]
     (reduce (fn [visibility x]
               (if (= (get-pos map-chart x) "#")
                 (->> all-pos
                      ;;  Filter the ones that are visibile
                      (filter #(and (= (get-pos map-chart %) "#")
                                    (visible? map-chart x %)))
                      count
                      ;; Don't count itself
                      dec
                      ;; Add result in accumulator
                      (assoc visibility x))
                 visibility))
             {}
             all-pos)))

(defn part-one
  ([]
   (part-one (-> (u/input-for-day 10)
                 input->map-chart)))
  ([map-chart]
   (->> (calculate-visibility map-chart)
        ;; Sort by the count
        (sort-by second)
        ;; Fetch the last pair (highest count)
        last
        ;; Get only the count
        second)))

;; Part two

(def two-pi (* 2 (math/pi)))

(defn angle
  "Calculates the angle from the initial position
  using the following quarters.

       |
    IV | I
  -----------
   III | II
       |
  "
  [[x y] [w z]]
  (let [dx (- w x)
        dy (- y z)]
    (let [angle (math/atan2 dx dy)]
      (if (neg? angle)
        (+ two-pi angle)
        angle))))

(defn all-visible
  [map-chart from candidates]
  (filter #(visible? map-chart from %) candidates))

(defn vaporize-asteroids
  ([map-chart from candidates]
   (vaporize-asteroids map-chart from candidates []))
  ([map-chart from candidates asteroids]
   (if (empty? candidates)
     asteroids
     (let [visible (->> candidates
                        (all-visible map-chart from)
                        (sort-by #(angle from %)))
           ;; Vaporize the visible one
           map-chart  (reduce #(set-pos %1 %2 ".")
                              map-chart
                              visible)
           candidates (reduce disj candidates visible)
           ;; Add the vaporized in the order calculated
           ;; by angle
           asteroids (reduce conj asteroids visible)]
       (recur map-chart from candidates asteroids)))))

(defn coord->result
  [[x y]]
  (+ y (* 100 x)))

(defn part-two
  ([]
   (part-two (-> (u/input-for-day 10)
                 input->map)
             [13 17]
             200))
  ([map-chart from pos]
   (let [[w h] (dimensions map-chart)
         candidates (->> (all-positions w h)
                         (filter #(= (get-pos map-chart %) "#"))
                         set)
         candidates (disj candidates from)]
     (-> map-chart
         (vaporize-asteroids from candidates)
         (get (dec pos))
         coord->result))))
