(ns advent.day-7
  (:require [advent.utils :as u]
            [advent.day-5 :as day-5]
            [clojure.string :as str]
            [clojure.set :as set]))

(defn all-settings
  [values]
  "Generate all possible settings combinations"
  (vec (for [i values j values k values l values m values
             :when (= 5 (-> [i j k l m] set count))]
         [i j k l m])))

(def all-settings-part-one
  (all-settings [0 1 2 3 4]))

(defn parse-output
  [out]
  (erlang/binary_to_integer (str/trim out)))

(defn run-amplifier
  [program setting input]
  (->> (day-5/compute program 0)
       with-out-str
       (with-in-str (str setting " " input))
       parse-output))

(defn run-amplifiers
  [program settings]
  (reduce (fn [input setting]
            (run-amplifier program setting input))
          0
          settings))

(defn input->program
  [input]
  (mapv erlang/binary_to_integer.1
        (-> input
            first
            (str/split ","))))

(defn part-one
  ([] (-> (u/input-for-day 7)
          input->program
          part-one))
  ([program]
   (->> all-settings-part-one
        (mapv #(run-amplifiers program %))
        (apply max))))

;; Part Two

(def all-settings-part-two
  (all-settings [5 6 7 8 9]))

(defn spawn-amplifier
  [program setting read-fn write-fn]
  (day-5/compute program 0
                 :read read-fn
                 :write write-fn))
