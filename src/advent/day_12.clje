(ns advent.day-12
  (:require [advent.utils :as u]
            [clojure.string :as str]))

;; -----------------------------------------------------------------------------
;; Part One
;; -----------------------------------------------------------------------------

(defn make-moon [pos vel]
  {:pos pos
   :vel vel})

(defn gravity-pull
  [{a :pos} {b :pos}]
  (mapv #(cond (< %1 %2) +1
               (> %1 %2) -1
               :else      0)
        a
        b))

(defn apply-gravity
  [{:keys [pos vel] :as moon} other-moons]
  (assoc moon :vel
         (->> other-moons
              (map #(gravity-pull moon %))
              (apply mapv + vel))))

(defn apply-velocity
  [{:keys [pos vel] :as moon}]
  (assoc moon :pos (mapv + pos vel)))

(defn step
  [moons]
  (let [moons (set moons)]
    (map #(-> %
              (apply-gravity (disj moons %))
              (apply-velocity))
         moons)))

(defn energy
  [x]
  (->> x
       (map erlang/abs.1)
       (reduce +)))

(defn total-energy
  [{:keys [pos vel]}]
  (*
   ;; potential
   (energy pos)
   ;; kinetic
   (energy vel)))

(defn system-energy
  [moons]
  (->> moons
       (map total-energy)
       (reduce +)))

(defn input->moon
  [line]
  (let [coords (-> line
                   (str/replace #"(<|>)" "")
                   (str/split #","))
        pos    (->> coords
                    (map #(str/replace % #" *?(x|y|z)=" ""))
                    (mapv erlang/binary_to_integer.1))]
    (make-moon pos [0 0 0])))

(defn input->moons
  [input]
  (mapv input->moon input))

(defn part-one
  ([] (-> (u/input-for-day 12)
          input->moons
          (part-one 1000)))
  ([moons n]
   (-> (iterate step moons)
       (nth n)
       system-energy)))

;; -----------------------------------------------------------------------------
;; Part Two
;; -----------------------------------------------------------------------------

(defn delta-vel
  [x y]
  (cond (< x y) +1
        (> x y) -1
        :else    0))

(defn* gravity-pull'
  [(erl-alias* moon-1 #erl[#erl[x y z] _])
   (erl-alias* moon-2 #erl[#erl[a b c] _])]
  (if (= moon-1 moon-2)
      #erl[0 0 0]
      #erl[(delta-vel x a)
           (delta-vel y b)
           (delta-vel z c)]))

(defn sum
  [xs]
  (lists/foldl (fn* [#erl[x y z] #erl[a b c]]
                    #erl[(+ x a)
                         (+ y b)
                         (+ z c)])
               #erl[0 0 0]
               xs))

(defn* apply-gravity'
  [#erl[pos vel] moons]
  #erl[pos
       (-> (lists/map #(gravity-pull' #erl[pos vel] %) moons)
           (conj vel)
           sum)])

(defn* apply-velocity'
  [#erl[pos vel]]
  #erl[(sum #erl(pos vel))
       vel])

(defn step'
  [moons]
  (lists/map #(-> %
                  (apply-gravity' moons)
                  apply-velocity')
             moons))

(defn make-moon'
  [pos vel]
  #erl[(->erl pos) (->erl vel)])

(defn input->moon'
  [line]
  (let [coords (-> line
                   (str/replace #"(<|>)" "")
                   (str/split #","))
        pos    (->> coords
                    (map #(str/replace % #" *?(x|y|z)=" ""))
                    (mapv erlang/binary_to_integer.1))]
    (make-moon' pos [0 0 0])))

(defn input->moons'
  [input]
  (->erl (map input->moon' input)))

(defn part-two
  ([] (-> (u/input-for-day 12)
          input->moons'
          part-two))
  ([moons]
   (loop [moons moons
          i 1
          history (set [moons])]
     (when (zero? (rem i 10000))
       (prn i))
     (let [moons' (step' moons)]
       (if (history moons')
         i
         (recur moons'
                (inc i)
                (conj history moons')))))))
