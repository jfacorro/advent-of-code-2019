(ns advent.day-5
  (:require [advent.utils :as u]
            [clojure.string :as str]))

(defn arg-val
  "Resolves what the argument should be based on the mode"
  [[n mode] program]
  (case mode
    :position (program n)
    :immediate n))

;; Operations

(defn add
  [[x y [z _]] program ip]
  [(assoc program
          z
          (+ (arg-val x program)
             (arg-val y program)))
   (+ ip 4)])

(defn multiply
  [[x y [z _]] program ip]
  [(assoc program
           z
           (* (arg-val x program)
              (arg-val y program)))
   (+ ip 4)])

(defn input
  [[[dest _]] program ip]
  (print "Input: ")
  [(assoc program dest (read))
   (+ ip 2)])

(defn output
  [[from] program ip]
  (println "Output: " (arg-val from program))
  [program
   (+ ip 2)])

(defn jump-if-true
  [[x y] program ip]
  [program
   (if-not (zero? (arg-val x program))
     (arg-val y program)
     (+ ip 3))])

(defn jump-if-false
  [[x y] program ip]
  [program
   (if (zero? (arg-val x program))
     (arg-val y program)
     (+ ip 3))])

(defn less-than
  [[x y [z _]] program ip]
  (let [res (if (< (arg-val x program) (arg-val y program)) 1 0)]
    [(assoc program z res)
     (+ ip 4)]))

(defn equals
  [[x y [z _]] program ip]
  (let [res (if (= (arg-val x program) (arg-val y program)) 1 0)]
    [(assoc program z res)
     (+ ip 4)]))

(def op-code->fn
  {1  [add 3]
   2  [multiply 3]
   3  [input 1]
   4  [output 1]
   5  [jump-if-true 2]
   6  [jump-if-false 2]
   7  [less-than 3]
   8  [equals 3]
   99 [:halt 0]})

(defn digits
  "Extracts digits in a vector. The first two digits
  are interpreted as a single number."
  ([n]
   (digits (erlang/div n 100) [(rem n 100)]))
  ([n digits]
   (if (pos? n)
     (recur (erlang/div n 10)
            (conj digits (rem n 10)))
     digits)))

(defn build-args
  "Build pairs of [n mode] where `n` is the integer
  provided as the arguemnt and mode is either
  `:position` or `:immediate`"
  [args modes]
  (mapv #(vector (args %)
                 (case (nth modes % 0)
                   0 :position
                   1 :immediate))
        (range (count args))))

(defn next-instr
  [program ip]
  (let [instr (program ip)
        [op-code & modes] (digits instr)
        [f arity] (op-code->fn op-code)
        args (subvec program (inc ip) (+ ip arity 1))]
    {:op-code op-code
     :f f
     :arity arity
     :args (build-args (vec args) (vec modes))}))

(defn apply-instr
  [{:keys [f args]} program ip]
  (f args program ip))

(defn compute
  [program ip]
  (let [instr (next-instr program ip)]
    (condp = (:f instr)
      :halt program
      nil   (throw [:invalid_op (:op-code instr)])
      (let [[program ip] (apply-instr instr program ip)]
        (recur program ip)))))

(defn parse-input
  []
  (mapv erlang/binary_to_integer.1
        (-> (u/input-for-day 5)
            first
            (str/split ","))))

(defn part-one
  ([] (part-one (parse-input)))
  ([program]
   (compute program 0)))
