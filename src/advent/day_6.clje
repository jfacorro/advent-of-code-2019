(ns advent.day-6
  (:require [advent.utils :as u]
            [clojure.string :as str]
            [clojure.set :as set]))

(defn direct-orbit
  [k m]
  (if (m k) 1 0))

(defn indirect-orbits
  ([k m] (indirect-orbits k m -1))
  ([k m c]
   (if-let [j (m k)]
     (recur j m (inc c))
     c)))

(defn orbits
  "Returns a map"
  ([k m] (orbits k m {} 1))
  ([k m result dist]
   (if-let [j (m k)]
     (recur j m (assoc result j dist) (inc dist))
     result)))

(defn build-orbit-map
  ([pairs] (build-orbit-map pairs {}))
  ([[[x y :as pair] & xs] m]
   (if pair
     (recur xs (assoc m y x))
     m)))

(defn parse-input
  ([] (parse-input (u/input-for-day 6)))
  ([lines]
   (mapv #(str/split % "\\)") lines)))

(defn part-one
  ([] (part-one (parse-input)))
  ([pairs]
   (let [m (build-orbit-map pairs)]
     (->> (keys m)
          (map (fn [k]
                 (+ (direct-orbit k m)
                    (indirect-orbits k m))))
          (reduce +)))))

(defn part-two
  ([] (part-two (parse-input)))
  ([pairs]
   (let [m (build-orbit-map pairs)
         you (orbits "YOU" m)
         san (orbits "SAN" m)
         common (set/intersection (-> you keys set)
                                  (-> san keys set))]
     (->> common
          (map (fn [planet] (+ (you planet) (san planet) -2)))
          sort
          first))))
