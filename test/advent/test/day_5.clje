(ns advent.test.day-5
  (:require [clojure.test :refer :all]
            [advent.day-5 :refer :all]
            [clojure.string :as str]))

;; Part One

(deftest test-part-one
  (testing "Examples for part 1"
    (are [program int-code] (-> (compute program 0)
                                :program
                                (nth 4)
                                (= int-code))
      [1002,4,3,4,33] 99
      [1101,100,-1,4,0] 99)))

;; Part Two

(defn run
  [program input]
  (with-out-str
    (with-in-str input
      (compute program 0))))

(deftest test-part-two
  (testing "Comparison instructions"
    ;; Using position mode, consider whether the input is
    ;; equal to 8; output 1 (if it is) or 0 (if it is not).
    (let [program [3,9,8,9,10,9,4,9,99,-1,8]]
      (are [input output] (= output (str/trim (run program input)))
        "1" "0"
        "8" "1"
        "42" "0"))

    ;; Using position mode, consider whether the input is
    ;; less than 8; output 1 (if it is) or 0 (if it is not).
    (let [program [3,9,7,9,10,9,4,9,99,-1,8]]
      (are [input output] (= output (str/trim (run program input)))
        "1"  "1"
        "8"  "0"
        "42" "0"))

    ;; Using immediate mode, consider whether the input is
    ;; equal to 8; output 1 (if it is) or 0 (if it is not).
    (let [program [3,3,1108,-1,8,3,4,3,99]]
      (are [input output] (= output (str/trim (run program input)))
        "1"  "0"
        "8"  "1"
        "42" "0"))

    ;; Using immediate mode, consider whether the input is
    ;; less than 8; output 1 (if it is) or 0 (if it is not).
    (let [program [3,3,1107,-1,8,3,4,3,99]]
      (are [input output] (= output (str/trim (run program input)))
        "1"  "1"
        "8"  "0"
        "42" "0")))

  (testing "Jump instructions"
    ;; Here are some jump tests that take an input, then output
    ;; 0 if the input was zero or 1 if the input was non-zero.
    (let [program-1 [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]
          program-2 [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]]
      (are [input output] (= output
                             (str/trim (run program-1 input))
                             (str/trim (run program-2 input)))
        "0"  "0"
        "-1" "1"
        "42" "1")))

  (testing "Complex program"
    ;; The above example program uses an input instruction to
    ;; ask for a single number. The program will then output 999
    ;; if the input value is below 8, output 1000 if the input
    ;; value is equal to 8, or output 1001 if the input value is
    ;; greater than 8.
    (let [program [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
                   1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
                   999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]]
      (are [input output] (= output (str/trim (run program input)))
        "1"  "999"
        "8"  "1000"
        "42" "1001"))))
